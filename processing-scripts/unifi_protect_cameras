#!/bin/bash
PROTECT_CONFIG="/etc/unifi-protect-extract/unifi-protect.conf"

if [ -f "${PROTECT_CONFIG}" ]
    then
    source "${PROTECT_CONFIG}"
else
    echo "Cannot locate unifi-protect.conf at ${PROTECT_CONFIG}"
    exit 1
fi

# Set variables
CLOUDKEY_URL="https://${CLOUDKEY_CONTROLLER}"

# Make our temporary path.
SESSION_FILE_PREAUTH=$(mktemp)
SESSION_FILE_AUTH=$(mktemp)

# Create the session container for cURL and get our CSRF token.
UNIFI_REQUEST=$(curl -s -D - --url "${CLOUDKEY_URL}" -c "${SESSION_FILE_PREAUTH}" -o /dev/null -k | egrep "X-CSRF-Token")
CSRF_TOKEN=$(echo ${UNIFI_REQUEST} | grep 'X-CSRF-Token' | cut -d':' -f2 | tr -d '[:space:]')

# Authenticate against the endpoint using the session container.
UNIFI_AUTH=$(
    curl -s --request POST \
  --url "${CLOUDKEY_URL}/api/auth/login" \
  --header 'content-type: application/json' \
  --header "x-csrf-token: ${CSRF_TOKEN}" \
  -b "${SESSION_FILE_PREAUTH}" \
  -c "${SESSION_FILE_AUTH}" \
  --data "{\"username\":\"${CLOUDKEY_USERNAME}\",\"password\":\"${CLOUDKEY_PASSWORD}\",\"rememberMe\":false}" \
  -k
)

# Authenticate against the instance.
AUTH_ACCEPTED=$(echo "${UNIFI_AUTH}" | grep error)
if test -z "${AUTH_ACCEPTED}"
then
    echo "Authentication Successful"
else
    echo "Failed to authenticate"
    exit 1
fi

# Get the list of cameras
UNIFI_CAMERAS=$(
    curl -s --url "${CLOUDKEY_URL}/proxy/protect/api/bootstrap" \
  --header "x-csrf-token: ${CSRF_TOKEN}" \
  -b "${SESSION_FILE_AUTH}" \
  -k
)

# Clean up files
rm -v "${SESSION_FILE_AUTH}" "${SESSION_FILE_PREAUTH}"

# Parse the output using jq and put into an array
declare -A CAMERAS
for CAM in $(echo $UNIFI_CAMERAS | jq '.cameras[] | "\(.mac),\(.name)"' | sed 's/[[:space:]]/_/g' | sed 's/"//g');
do
    IFS="," read -a CAMSTR <<< $CAM
    echo "Identified Camera ${CAMSTR[0]} named ${CAMSTR[1]}."
    CAMERAS[${CAMSTR[0]}]=${CAMSTR[1]}
done